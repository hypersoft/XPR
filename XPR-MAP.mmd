Mind Map generated by NB MindMap plugin   
> __version__=`1.1`
---

# XPR

## Kiosk
> fillColor=`#000000`,leftSide=`true`,mmd.emoticon=`tick`,textColor=`#FFFFFF`


### Supervisor
> fillColor=`#7BFFB0`,textColor=`#000000`


## Math
> fillColor=`#000000`,leftSide=`true`,mmd.emoticon=`tick`,textColor=`#FFFFFF`


## Configuration
> fillColor=`#000000`,leftSide=`true`,mmd.emoticon=`tick`,textColor=`#FFFFFF`


### Parameter
> fillColor=`#7BFFB0`,textColor=`#000000`


#### Selector
> fillColor=`#7BFFB0`,textColor=`#000000`


#### ValueType
> fillColor=`#7BFFB0`,textColor=`#000000`


### Director
> fillColor=`#7BFFB0`,textColor=`#000000`


### Category
> fillColor=`#7BFFB0`,textColor=`#000000`


### Supervisor
> fillColor=`#7BFFB0`,textColor=`#000000`


## IO
> fillColor=`#000000`,textColor=`#FFFFFF`


### Network
> fillColor=`#FF4545`


#### DNS
> fillColor=`#FF4545`


#### Connection
> fillColor=`#FF4545`


##### Protocol
> fillColor=`#FF4545`


###### TCP
> fillColor=`#FF4545`


###### UDP
> fillColor=`#FF4545`


#### Services
> fillColor=`#FF4545`


##### HTTP
> fillColor=`#FF4545`


###### Server
> fillColor=`#FF4545`


###### Client
> fillColor=`#FF4545`


#### Proxy
> fillColor=`#FF4545`


#### Socket
> fillColor=`#FF4545`


##### Port
> fillColor=`#FF4545`


### Link
> fillColor=`#FF4545`

- NOTE
<pre>Better than [re]source

These &quot;identifiers&quot; and locators are IO targets as a matter of fact. If we look at the map
we can see that there are a ton of missing &quot;uniform resource&quot; locators.

What we really have is a mapping to some form of storage.

So it's more than likely Source/Destination: Target. Just like a file.

IO Pseudos (pseudonyms). I want to pick a single word and it has to conform
with correct logical word construction.

Locator/target/mapping/source/destination/pseudonyms.

Has all the makings of a patch. exactly what happens in the io stack. 
a virtual path is substituted for a &quot;realpath&quot;. The above list cleary lays that out.

I think Mash is a good one. IO.Mash, more than a patchwork; a conjunction of
mashups. Very logical, but very foreign to common coding language.

lol.

Link

&quot;click on the link&quot;, this link here, that link there. which link? they are all IO links,
not actual endpoints.

So, networking needs to drop the context of &quot;link&quot; and continue using connection,
which represents physical connection. Exception: Wireless; but why use link
when you have Wireless?</pre>

#### URI
> collapsed=`true`,fillColor=`#FF4545`


#### URL
> collapsed=`true`,fillColor=`#FF4545`


#### URN
> fillColor=`#FF4545`


### Storage
> fillColor=`#FF4545`


#### DOS
> fillColor=`#FF4545`


##### Director
> fillColor=`#FF4545`


##### Supervisor
> fillColor=`#FF4545`


###### Metrics
> fillColor=`#FF4545`


###### Ownership
> fillColor=`#FF4545`


###### Permissions
> fillColor=`#FF4545`


##### File
> fillColor=`#FF4545`


##### Directory
> fillColor=`#FF4545`


##### Link
> fillColor=`#FF4545`


##### Package
> fillColor=`#FF4545`


###### Tar
> collapsed=`true`,fillColor=`#FF4545`


#### RAM
> fillColor=`#FF4545`


##### Metrics
> fillColor=`#FF4545`


##### Buffer
> collapsed=`true`,fillColor=`#FF4545`


### Codec
> fillColor=`#7BFFB0`,textColor=`#000000`,topicLinkUID=`160518EA664A`


#### Transformation
> fillColor=`#7BFFB0`,textColor=`#000000`


#### Buffer
> fillColor=`#7BFFB0`,textColor=`#000000`


### Compression
> fillColor=`#FF4545`


#### Zip
> collapsed=`true`,fillColor=`#FF4545`


### Standard
> fillColor=`#FF4545`,textColor=`#000000`


#### Channel
> collapsed=`true`,fillColor=`#FF4545`

- NOTE
<pre>formerly Descriptor</pre>

#### Stream
> fillColor=`#FF4545`


#### Pipe
> fillColor=`#FF4545`,textColor=`#000000`


#### FIFO
> fillColor=`#FF4545`,textColor=`#000000`


## Crypto
> fillColor=`#000000`,leftSide=`true`,textColor=`#FFFFFF`


### Authentication
> fillColor=`#7BFFB0`


#### MD5Sum
> collapsed=`true`,fillColor=`#7BFFB0`


### Basic
> fillColor=`#FF4545`


#### Base8
> collapsed=`true`,fillColor=`#FF4545`


#### Base16
> collapsed=`true`,fillColor=`#7BFFB0`


#### Base64
> collapsed=`true`,fillColor=`#7BFFB0`


## System
> fillColor=`#000000`,leftSide=`true`,textColor=`#FFFFFF`

- NOTE
<pre>To provide multi-system-support, XPR will employ system name configuration files.

Theory of Operation

XPR will mandate that the system configuration file be provided by the system.
So XPR creates a cross-platform-configuration-file-standard; Which other software
systems can use to perform their own cross-platform-operations with their own libraries.

When the XPR.System class boots [@&lt;cinit&gt;], the class will load the system
configuration file, if found, if not found, XPR will load a generic unix file,
or a generic windows file, from its own package and will signal a fault on, the
standard error=fault handle, or system-log for the lack of a 
custom-system-constant-values-convention.

For any system-value that is not constant, there must be a get/set accessor.
</pre>

### Viron
> collapsed=`true`,fillColor=`#7BFFB0`


### Log
> fillColor=`#FF4545`


### Paths
> fillColor=`#FF4545`,textColor=`#000000`

- NOTE
<pre>The System Paths

Main Application Directory [unix: /bin]
Main Library Directory [unix: /lib]
Main System Application Configuration Files Directory [unix: /etc]

Temporary Filing Directory</pre>

### Group
> fillColor=`#FF4545`,textColor=`#000000`


#### Members
> fillColor=`#FF4545`,textColor=`#000000`


### Operator
> fillColor=`#FF4545`,textColor=`#000000`

- NOTE
<pre>formerly User</pre>

### Operation
> fillColor=`#FF4545`

- NOTE
<pre>formerly Process</pre>

### Console
> fillColor=`#FF4545`


## Plus
> fillColor=`#000000`,textColor=`#FFFFFF`


### Help
> fillColor=`#7BFFB0`,textColor=`#000000`


#### Locator
> fillColor=`#7BFFB0`,textColor=`#000000`


### Function
> fillColor=`#FF4545`,textColor=`#000000`


### Type
> fillColor=`#FF4545`,textColor=`#000000`


## Qeue
> fillColor=`#FF4545`,leftSide=`true`


### Task
> fillColor=`#FF4545`


#### Thread
> fillColor=`#FF4545`


## Fault
> fillColor=`#000000`,leftSide=`true`,mmd.emoticon=`tick`,textColor=`#FFFFFF`


## JSON
> fillColor=`#000000`,leftSide=`true`,mmd.emoticon=`tick`,textColor=`#FFFFFF`


### Builder
> fillColor=`#7BFFB0`,textColor=`#000000`


### Compiler
> fillColor=`#7BFFB0`,textColor=`#000000`


### Composer
> fillColor=`#7BFFB0`,textColor=`#000000`


### Plus
> fillColor=`#7BFFB0`,textColor=`#000000`


#### Cookie
> fillColor=`#7BFFB0`,textColor=`#000000`


##### Batch
> fillColor=`#7BFFB0`,textColor=`#000000`


#### CSV
> fillColor=`#7BFFB0`,textColor=`#000000`


#### HTTP
> fillColor=`#7BFFB0`,textColor=`#000000`


##### Compiler
> fillColor=`#7BFFB0`,textColor=`#000000`


#### XML
> fillColor=`#7BFFB0`,textColor=`#000000`


##### Compiler
> fillColor=`#7BFFB0`,textColor=`#000000`


##### Kit
> fillColor=`#7BFFB0`,textColor=`#000000`


### Serialization
> fillColor=`#7BFFB0`,textColor=`#000000`


### Type
> fillColor=`#7BFFB0`,textColor=`#000000`


#### Path
> fillColor=`#7BFFB0`,textColor=`#000000`


##### Builder
> fillColor=`#7BFFB0`,textColor=`#000000`


#### Variant
> fillColor=`#7BFFB0`,textColor=`#000000`


##### Null
> fillColor=`#7BFFB0`,textColor=`#000000`


#### VariantList
> fillColor=`#7BFFB0`,textColor=`#000000`


## Speak
> fillColor=`#000000`,leftSide=`true`,mmd.emoticon=`tick`,textColor=`#FFFFFF`


## Crosswalk
> leftSide=`true`

- NOTE
<pre>JNI Library Loading</pre>
